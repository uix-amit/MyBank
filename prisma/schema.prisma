// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum LoanType {
  HOME
  VEHICLE
  GOLD
  MORTGAGE
  PERSONAL
  EDUCATIONAL
}

enum LoanAccountStatus {
  OUTSTANDING
  SETTLED
}

enum TransactionStatus {
  INPROGRESS
  COMPLETE
  FAILED
}

enum AccoutStatus {
  ACTIVE
  INACTIVE
  DORMANT
  CLOSED
}

enum Currency {
  INR
  GBP
  USD
  AUD
  JPY
  EUR
}

model Users {
  UserID             String               @id @default(cuid())
  FirstName          String
  LastName           String
  Email              String               @unique
  Password           String
  PhoneNumber        String
  DateOfBirth        DateTime
  CreatedAt          DateTime?            @default(now())
  UpdatedAt          DateTime?            @updatedAt
  Accounts           SavingsAccount[]     @ignore
  Loans              Loans[]              @ignore
  TwoFactorAuth      TwoFactorAuth[]      @ignore
  Notifications      Notifications[]      @ignore
  AccountPreferences AccountPreferences[] @ignore
}

model Banks {
  BankID            String           @id @default(cuid())
  BankName          String           @unique
  CustomerCareEmail String
  CustomerCarePhone String
  Accounts          SavingsAccount[] @ignore
  Loans             Loans[]          @ignore
}

model SavingsAccount {
  AccountID                String         @id @default(cuid())
  UserID                   String
  BankID                   String
  AccountNumber            String         @unique
  Balance                  Float
  Currency                 Currency       @default(INR)
  Status                   AccoutStatus   @default(ACTIVE)
  CreatedAt                DateTime?      @default(now())
  UpdatedAt                DateTime?      @updatedAt
  User                     Users          @relation(fields: [UserID], references: [UserID]) @ignore
  Bank                     Banks          @relation(fields: [BankID], references: [BankID]) @ignore
  Cards                    Cards[]        @ignore
  Transactions_FromAccount Transactions[] @relation("FromAccount") @ignore
  Transactions_ToAccount   Transactions[] @relation("ToAccount") @ignore
}

model Cards {
  CardID         String         @id @default(cuid())
  AccountID      String
  CardNumber     String         @unique
  ExpirationDate DateTime
  CVV            Int
  CreatedAt      DateTime?      @default(now())
  UpdatedAt      DateTime?      @updatedAt
  Account        SavingsAccount @relation(fields: [AccountID], references: [AccountID]) @ignore
}

model Transactions {
  TransactionID     String            @id @default(cuid())
  FromAccountID     String
  ToAccountID       String
  Amount            Float
  TransactionType   TransactionType
  TransactionDate   DateTime?         @default(now())
  TransactionStatus TransactionStatus @default(INPROGRESS)
  FromAccount       SavingsAccount    @relation("FromAccount", fields: [FromAccountID], references: [AccountID]) @ignore
  ToAccount         SavingsAccount    @relation("ToAccount", fields: [ToAccountID], references: [AccountID]) @ignore
}

model Loans {
  LoanID          String            @id @default(cuid())
  UserID          String
  BankID          String
  AccountNumber   String            @unique
  LoanType        LoanType
  LoanAmount      Float
  InterestRate    Float
  LoanTerm        Int               @default(360)
  LoanStartDate   DateTime          @default(now())
  LoanEndDate     DateTime
  RemainingTenure Int
  LoanStatus      LoanAccountStatus @default(OUTSTANDING)
  CreatedAt       DateTime?         @default(now())
  UpdatedAt       DateTime?         @updatedAt
  User            Users             @relation(fields: [UserID], references: [UserID]) @ignore
  Bank            Banks             @relation(fields: [BankID], references: [BankID]) @ignore
}

model TwoFactorAuth {
  TwoFactorAuthID String    @id @default(cuid())
  UserID          String
  Otp             Int
  CreatedAt       DateTime? @default(now())
  User            Users     @relation(fields: [UserID], references: [UserID]) @ignore
}

model Notifications {
  NotificationID String    @id @default(cuid())
  UserID         String
  Message        String
  IsRead         Boolean?  @default(false)
  CreatedAt      DateTime? @default(now())
  User           Users     @relation(fields: [UserID], references: [UserID]) @ignore
}

model AccountPreferences {
  AccountPreferenceID String    @id @default(cuid())
  UserID              String
  EmailNotifications  Boolean?  @default(true)
  SMSNotifications    Boolean?  @default(true)
  PushNotifications   Boolean?  @default(true)
  EnableTwoFactorAuth Boolean?  @default(true)
  CreatedAt           DateTime? @default(now())
  UpdatedAt           DateTime? @updatedAt
  User                Users     @relation(fields: [UserID], references: [UserID]) @ignore
}
